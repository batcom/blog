%title 项目所使用框架的详细说明文档
==`项目所使用框架的详细说明文档`==
我的大学网,该项目基于B/S开发,采用的是当今主流的三大框架技术,`Struts1.2`+`hibernate3.0.5`+`spring2.5`.
这里简单的介绍下，SSH框架.
# `struts1`,是一个很不错的MVC（Model-View -Controller）设计模式，MVC模式将程序代码整理切割为三部分，Model 部分是业务与应用领域（Business domain) 相关逻辑、管理状态之对象，Controller 部分接收来自View 所输入的资料并与Model 部分互动， 是业务流程控制（ Flow Control) 之），View 部分则负责展现资料、接收使用者输入资料。在Java 应用中，JFC/Swing、AWT、JSP皆是可用作View 的技术规格，而JavaBean 与Enterprise JavaBean 规格则可用于Model程序代码，一旦应用程序以MVC 模式加以适当的分割，Model 部分程序代码可在不同使用者接口外观的应用程序中重复使用。
# `hibernate`,是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的J2EE架构中取代CMP，完成数据持久化的重任。
# `spring`,是一个轻量级框架。它的的核心是一个轻量级（Lightweight）的容器（Container），它是实现IoC（Inversion of Control）容器和非入侵性（No intrusive）的框架，并提供AOP（Aspect-oriented programming）概念的实现方式；提供对持久层（Persistence）、事物（Transcation）的支持；提供MVC Web框架的实现，并对一些常用的企业服务API（Application Interface）提供一致的模型封装，是一个全方位的应用程序框架（Application Framework），除此之外，对现存的各种框架（Structs、JSF、Hibernate、Ibatis、Webwork等），Spring也提供了与他们相整合的方案。
----
===`大学网项目SSH架构图`===
    ===={{../../../public/images/mdaxueframework.jpg}}====

由此可见，我们可以看出。我们从数据库里面(mysql数据库),把表生成实体类，Dao和xml文件，利用hibernate去管理它的关系映射。而hibernated的配置文件默认是`hibernate.cfg.xml`(当然也可以设置多个)，它是用来管理表生成的xml文件。比如：`<mapping resource="com/mdaxue/domain/TListen.    hbm.xml" />`这段代码,我们就可以看到它在`com.mdaxue.domain`这个包下面。通过这个文件我们可以很轻易的找到它的实体类。注：hibernate生成的xml    文件是和它的实体类是在同一目录下的，我们开发时要它的命名遵守规范。 然后通过spring这个容器，注入dao层和service层，在它的实现层我们定义一个service层下面接口类的变量，我们把它生成get和set方法。比如：
{{{
private UserService userService;
        private UserService userService;//在这里我们定义了变量，生成了相应的get()和set()方法
        public UserService getUserService() {
                    return userService;
        }

        public void setUserService(UserService userService) {
                    this.userService = userService;
        }
    }}}

然后通过`applicationContext-beans.xml`这个文件去注入进去。例子：
{{{
    <bean id="adminAlumnus" class="com.mdaxue.college.alumnus.CollegeAdminAlumnus>
            <property name="userService" ref="service"/>
    </bean>
    而我们也可以看出它的dao层的定义的变量是service，通过这个我们就可以找到它的DAO。同时也注入到spring去，例子：
    这个例子文件的名字是：spring-user.xml 
    <bean id="service" class="com.mdaxue.user.UserService"
            singleton="false">
            <property name="userDAO">
                        <ref bean="TUserDAO" />
            </property>
    }}}
它的配置文件默认是applicationContext.xml。也可以自定义（但是最好取名字规范）。最后我们通过struts1来处理action和页面的跳转。它默认的配置文件`struts.xml`,然而我们的项目都有一个想对应的文件，方便管理模块。比如：`struts-config-ceo.xml`
{{{
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE struts-config PUBLIC "-//Apache Software Foundation//DTD Struts Configuration 1.1//EN" "http://jakarta.apache.org/struts/dtds/struts-config_1_1.dtd">
    <struts-config>
        <action-mappings>
                <action path="/ceoApply" type="com.mdaxue.ceo.action.CeoApplyAction" parameter="act">           
                            <forward name="success" path="/Ceo2012-10-22/CEOJoinTeam.jsp" />
                                        <forward name="sumbitSuccess" path="/Ceo2012-10-22/CEOJoinTeam.jsp" redirect="true"/>
                                                </action>       
        </action-mappings>  
    </struts-config>
    }}}
比如说这个例子，它的path属性是是这个Action类的相对路径，就是所有的“ceoApply.do”请求都会进入这里。type属性是action所在的项目路径。它默认的进入action找的方法是“execute”。
{{{
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                HttpServletRequest request, HttpServletResponse response)
                throws Exception {
                            return super.execute(mapping, form, request, response);
    }
    }}}
当然也可以自定义方法，如这个属性parameter="act"。（例子：whu.mdaxue.com/ceoApply.do?act=mdxadd）我们通过这个网址就可以看到在“ceoApply.do”的后面加了个"act=mdxadd",它就会找action里面的mdaxadd的方法：
{{{
    public ActionForward mdxadd(ActionMapping mapping, ActionForm form,
                HttpServletRequest request, HttpServletResponse response)
                throws Exception {
                            return mapping.findForward("success");
    }
    }}}
然后通过它返回的一个地址或者字符串（“success”）。我们进入`struts-config-ceo.xml`去找相应的name=“success”.最后通过想对应的拦截器，去验证，把结果反馈给用户（以jsp形式或者html显示在浏览器上）。
