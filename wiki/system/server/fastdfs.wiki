%title FastDfs4.0.6的配置与安装
==FastDfs4.0.6的配置与安装==
===FastDfs简介===
简介说白了就是为什么选用它。`fastDFS`是`淘宝`资深架构师`余庆`用纯`C`所写，很多`大型的公司和网站`已经投入使用，
JD(`京东商城`)就是一个例子，其它的就不多说了。所以最终就是`N人+C性能稳定+JD`可行。
那为什么用它呢？ `分布式`概念大家都懂，不懂自行Google。首先说明我们用的只是它其中很小的一部份功能，
第一利用的是分布式的集中管理功能，在这次部署各个项目的时候发现一个问题：就是每一个项目都有自己的一套文件目录结构，
而代码仓库里面是没有这些东西的，典型的就是upload的图片文件等，这样就造成了文件管理的混乱和分散，不利于备份，而这些数据
又是很重要的，因为是用户的数据，没有任何东西来管理他们，现在就可以用`fastdfs`集中管理。
第二就是有项目还是跨服务器的，所以当JAVA项目要访问学盘文件的时候，需要用到系统的`NFS`功能，即磁盘挂载。
这样部署了之后这样的问题都不存在了，而且方便备份管理，也不需要改变原来的什么，方案可行。而且后期功能可以无限扩展，使用群集等
===FastDfs原理===
具体的原理这里就不详细介绍，网络随便一搜索都有，而且是千篇一律的，所以这里粘贴过来就没有什么意义。所以，这里是结合生产上面的详细例子来说下原理，下面以php语言为例，Java明白原理后其实也一样。这里分为几个步骤:
# 用户请求文件比如上传或者下载，即运行服务器上的php脚本代码时，这是php语言即为客户端发起对象，通过的是php的api 里面提供了一个`XXXXXupload_by_file_name1`的函数，这样他会根据扩展中的配置（这个当然是在`php.ini`中配置的，下面安装过程有操作）， 找到`/etc/fdfs/client.conf`，然后根据里面的配置和`Nginx-fastdfs`模块进行通讯。这一步我们称之为客户端`请求过程`
# `Nginx-fastdfs模块`根据请求，先查找本机是否存在`Storage服务器`，如果没有就通过`tracker server`找到相关的文件对应的`Storage server`上该文件的详细信息如`file_id`，这样Nginx即可找到该请求对应的资源。这个过程我们称之为`tracker过程`。
# 最后Nginx返回对应的资源给客户端，这个过程即为`应答过程`。
----
这里我们注意到在网上所写的原理图里面并没有提到Nginx，这个需要结合上面的实例进行体会，Nginx模块只在这里充当了一个代理角色。即代理tracker server 和storage server 之间的一个`桥`，但是根据原理所说，这个桥也是可以不存在的，因为storage server是直接会给每一个同组的tracker server进行汇报文件的情况的。这在网上介绍原理里面说的很清楚，每一个storage和tracker都是`平级`的，不存在`单点故障`，所以你可以通过任何语言充当客户端发起请求，通过请求配置找到一个可用的tracker，然后可用的tracker会帮你找到一个包含该请求的可用的storage，然后让client和storage直接进行通讯。
那么Nginx模块在这里到底充当了一个什么角色呢？我们说是一个`中间人`的角色，它在这里是一个`双面人`，很像`TCP/IP`里面的`中间人攻击`的例子。这是通过Nginx很有特色的`代理`完成的。比如面对客户端本来的角色应该是tracker，但是现在是Nginx模块了，tracker被Nginx代理了。客户和Nginx-fastdfs模块进行通讯，然后Nginx-fastfds模块再告诉tracker。
面对Storage也一样，本来和Storage进行通讯的应该是tracker或者client，这是Nginx-fastdfs模块又代理成Storage，来和tracker或者client通讯。
这样解释后应该对这三者有很清楚的了解了，所以也就可以明白安装的顺序和如何使用了，如果还不清晰可以多读几遍参考中间人的解释进行理解或者直接讨论。
----
===安装过程===
fastDFS在实际生产安装使用过程中涉及到3部分。
* `第一部分`：服务端的编译与安装，包含tracker store的安装与配置
* `第二部分`：WebService（apache\nginx）的扩展模块的安装与配置
* `第三部分`：客户端API的安装与配置，如php扩展，java JAR包等。
----
====服务端的编译安装与配置====
# `tracker和storage的编译和安装`:
{{{class="brush :bash"
tar zxf FastDFS_v4.06.tar.gz
cd FastDFS
sh make.sh
sh make.sh install
}}}
# `tracker的配置`:安装好了后，就会在`/etc/fdfs/`下面有`tracker.conf` `storage.conf`两个文件，配置也很简单`tracker.conf`:
    - 修改`base_path` = `/data/fastdfs/tracker`(如果没有这个目录需要建立)，其它保持默认即可
# `storage的配置`:`/etc/fdfs/storage.conf`
    - 修改base_path = /data/fastdfs/store(如果没有这个目录需要建立)
    - 修改store_path0 = /data/fastdfs/store
    - 修改tracker_server = 192.168.0.19:22122 (这里该为你自己的IP)
    - 其它保持默认即可.
# `tracker store`的启动:
    - sudo fdfs_trackerd /etc/fdfs/tracker.conf (启动tracker)
    - sudo fdfs_storaged /etc/fdfs/storage.conf (启动storage)
    - 开机自动启动：vim /etc/rc.local 将以上的命令添加进去即可。因为这是一个很重要的服务所以需要开机启动
----
====WebService（apache\nginx）的扩展模块的安装与配置====
因为生产上面是`Nginx`，所以这里只介绍`Nginx-fastdfs`模块的安装，版本为`V1.1.5`。而且Nginx扩展如何编译安装和一些约定以及需要注意的事情，参看[[nginx|Nginx1.2.6的配置与安装]]
----
# `fastdfs-nginx-module的安装`:
{{{class="brush :bash"
cd /usr/local/src
tar zxvf fastdfs-nginx-module_v1.15.tar.gz
cd /usr/local/src/nginx-1.2.6
./configure --prefix=/usr/local/nginx --with-google_perftools_module --without-http_memcached_module \
--user=www --group=www --with-http_stub_status_module --with-openssl=/usr/ --with-pcre=/usr/local/src/pcre-8.33 \
--with-http_image_filter_module --add-module=/usr/local/src/nginx-http-concat \
--add-module=/usr/local/src/fastdfs-nginx-module/src
}}}
# `fastdfs-nginx-module的配置`:
    - 首先要建立一个软链接，这一步一定不要忘了:`ln -s /data/fastdfs/store/data/M00 /data/fastdfs/store/data`。
    - 配置文件在`static.conf`里面全局的配置了，这个在[[nginx|Nginx1.2.6的配置与安装]]有详细说明.
----
====php-fastdfs客户端扩展的安装与配置====
{{{class="brush :bash"
cd /usr/local/src/FastDFS/php_client
/usr/local/php5/bin/phpize
./configure
make && make install
cat fastdfs_client.ini >> /etc/php.ini
    }}}
----
然后修改一下客户端的配置文件,`client.conf`:
- `vim /etc/fdfs/client.conf `
- 修改`base_path=/data/fastdfs/store`
- 修改`tracker_server=192.168.0.19:22122`
- `service php5-fpm reload`一下就应该能看到扩展了
----
====Java-fastdfs客户端的安装与配置====
`由斌斌完善`
